package dsatry;
import java.util.*;

class Node{
	int No;
	String Name;
	Node next;
	char type;

	public Node(Node v) {
		this.No=v.No;
		this.Name=v.Name;
		this.next=null;
	}

	public Node(int No,String Name, char type) {
		this.No=No;
		this.Name=Name;
		this.type=type;
		this.next=null;
	}

	public Node(int src) {
		this.No=No;
		// TODO Auto-generated constructor stub
	}
}

class creation{
	//int graph[][];
	int adjmat[][];
	Scanner sc = new Scanner(System.in);
	Node head[] = new Node[13]; // number of heads for creating adjacency list
	int c=13;// number of vertices total in graph
	int e=13;// number of edges
	int i;
	int j;

	public void edgeCreate(Node u,Node v, int weight) {

		Node curr;
		Node new_node=new Node(v);
		for(i=0;i<6;i++) {
			if(head[i].No==u.No && head[i].type==u.type) {
				curr=head[i];
				while(curr.next!=null) {
					curr=curr.next;
				}
				curr.next=new_node;
			}
		}
	}
	/*public int minDistance(int dist[], Boolean b[]) {
		int min=Integer.MAX_VALUE, index=-1;
		for(int x=1; x<14; x++) {
			if(b[x]==false && dist[x]<=min) {
				min=dist[x];
				index=x;
			}

		}
		return index;
	}
	public void printGraph(int dist[], int x) {
		System.out.println("Distance from source to destination is: ");
		for(int i=1; i<14; i++) {
			System.out.println(i+ " ----" +dist[i]);
		}


	}
	public void dijkstra(int[][] adjacencyMatrix, int src) {
		int dist[]= new int[14];
		Boolean b[]=new Boolean[14];
		for (int i=1; i<14; i++) {
			dist[i]=Integer.MAX_VALUE;
			b[i]=false;
		}
		dist[0]=0;
		for(int count=1; count<=14; count++) {
			int u=minDistance(dist,b);
			b[i]=true;
			for(int x=1; x<14; x++) {
				if(!b[x] && adjacencyMatrix[u][x]!=0 && dist[u]!=Integer.MAX_VALUE && dist[u]+adjacencyMatrix[u][x]<dist[x]){
					dist[x]=dist[u]+adjacencyMatrix[u][x];
					}
				printGraph(dist,x);
			}
		}
	}*/
	public void dijkstra(int[][] adjacencyMatrix,Node src) {

		int v=adjacencyMatrix.length;
		boolean visited[]=new boolean[v];
		int distance[]=new int[v];
		//distance[0]=0;
		//first vertex ka distance would be 0 and baki saaare vertex ka distance would be infinity intially
		for(int i=0;i<6;i++) {
			distance[i]=Integer.MAX_VALUE;
			visited[i]=false;
		}

		int index=0;
		for(i=0;i<v;i++) {
			if((head[i].Name).equalsIgnoreCase(src.Name)) {
				index=i;
				break;
			}
		}
		distance[index]=0;

		for(int i=0;i<v-1;i++) {
			//find vertex with minimum distance from the starting vertex
			int minVertex=findMinVertex(distance,visited);
			visited[minVertex]=true;
			//explore the neighbors
			for(int j=0;j<v;j++) {
				if(adjacencyMatrix[minVertex][j]!=0 && !visited[j] && distance[minVertex]!=Integer.MAX_VALUE) {

					int newDist=distance[minVertex]+adjacencyMatrix[minVertex][j];
					if(newDist<distance[j]) {
						distance[j]=newDist;
					}
				}
			}
		}

		//print vertex ka number and uska distance
		//for(int i=0;i<6;i++) {
		//	System.out.println(src.Name+" "+distance[i]);
		//}
		System.out.println("\nEnter destination for shortest route");
		int dest=sc.nextInt();
		System.out.println("\nShortest distance is: "+ distance[dest] +" km");
	}

	public void matrix() {
		for(int i=1;i<6;i++) {
			for(int j=1;j<6;j++) {
				System.out.print("  "+adjmat[i][j]+"  ");
			}
			System.out.println();
		}
	}

	public int findMinVertex(int[]distance,boolean visited[]) {
		int minVertex=-1;
		for(int i=0;i<distance.length;i++) {
			if(!visited[i] && (minVertex==-1 || distance[i]<distance[minVertex])) {
				minVertex=i;
			}
		}
		return minVertex;
	}

	public void displayList() {
		System.out.println("Adjacency list: ");
		for (int i = 0; i <6; i++) {
			Node curr = head[i];
			System.out.print(curr.Name + " ");
			while (curr.next != null) {
				curr = curr.next;
				System.out.print("--> " + curr.Name);
			}
			System.out.println();
		}
	}

	public void allCreate() {
		adjmat=new int[6][6];
		for(int i=0;i<6;i++) {
			for(int j=0;j<6;j++) {
				adjmat[i][j]=0;
			}
		}
		Node c0=new Node(0,"Pune",'c');
		head[0]=c0;
		Node c1=new Node(1,"Bangalore",'c');
		head[1]=c1;
		Node c2=new Node(2,"Delhi",'c');
		head[2]=c2;
		/* Node c4=new Node(8,"indore",'c');
		 head[8]=c4;
		 Node c5=new Node(3,"kashmir",'c');
		 head[3]=c5;*/
		Node p1=new Node(3,"p1",'p');
		head[3]=p1;
		Node p2=new Node(4,"p2",'p');
		head[4]=p2;
		/*Node p3=new Node(7,"p3",'p');
		 head[7]=p3;
		 Node p4=new Node(4,"p4",'p');
		 head[4]=p4;*/

		Node r1=new Node(5,"r1",'r');
		head[5]=r1;
		/*Node r2=new Node(10,"r2",'r');
		 head[10]=r2;
		 Node r3=new Node(9,"r3",'r');
		 head[9]=r3;
		 Node r4=new Node(5,"r4",'r');
		 head[5]=r4;*/
		edgeCreate(c0,p1,5);
		edgeCreate(p1,c0,5);
		adjmat[0][3]=5;
		adjmat[3][0]=5;

		edgeCreate(p1,c1,10);
		edgeCreate(c1,p1,10);
		adjmat[3][1]=10;
		adjmat[1][3]=10;

		edgeCreate(p1,c2,3);
		edgeCreate(c2,p1,3);
		adjmat[3][2]=3;
		adjmat[2][3]=3;

		edgeCreate(c1,p2,7);
		edgeCreate(p2,c1,7);
		adjmat[1][4]=7;
		adjmat[4][1]=7;

		edgeCreate(p2,c2,4);
		edgeCreate(c2,p2,4);
		adjmat[2][4]=4;
		adjmat[4][2]=4;

		edgeCreate(c1,r1,8);
		edgeCreate(r1,c1,8);
		adjmat[1][5]=8;
		adjmat[5][1]=8;

		/*edgeCreate(c4,r3,475);
		 edgeCreate(r3,c4,475);
		 adjmat[8][9]=475;
		 adjmat[9][8]=475;

		 edgeCreate(c4,p3,725);
		 edgeCreate(p3,c4,725);
		 adjmat[8][7]=725;
		 adjmat[7][8]=725;

		 edgeCreate(c2,p3,650);
		 edgeCreate(p3,c2,650);
		 adjmat[6][7]=650;
		 adjmat[7][6]=650;

		 edgeCreate(c2,p4,570);
		 edgeCreate(p4,c2,570);
		 adjmat[6][4]=570;
		 adjmat[4][6]=570;

		 edgeCreate(p4,r4,315);
		 edgeCreate(r4,p4,315);
		 adjmat[4][5]=315;
		 adjmat[5][4]=315;

		 edgeCreate(p4,c5,740);
		 edgeCreate(c5,p4,740);
		 adjmat[4][3]=740;
		 adjmat[3][4]=740;

		 edgeCreate(r1,c5,100);
		 edgeCreate(c5,r1,100);
		 adjmat[2][3]=740;
		 adjmat[3][2]=740;*/
		int ch1;
		do{
			System.out.println("\n 0: PUNE\n 1: BANGALORE \n 2: DELHI "
				+ "\n 3: PUNE BANGALORE PETROL PUMP \n 4: BANGALORE DELHI PETROL PUMP "
				+ "\n 5: REST LOCATION");
		System.out.println("\nEnter source for shortest route");
		int ch=sc.nextInt();

		switch(ch) {
		case 0: dijkstra(adjmat,c0);
		break;
		case 1: dijkstra(adjmat,c1);
		break;
		case 2: dijkstra(adjmat,c2);
		break;
		case 3: dijkstra(adjmat,p1);
		break;
		case 4: dijkstra(adjmat,p2);
		break;
		case 5: dijkstra(adjmat,r1);
		break;
		}
		System.out.println("PRESS 1 TO CONTINUE AND ANY OTHER NUMBER TO EXIT");
		ch1=sc.nextInt();
		if(ch1!=1) {
			System.out.println("*********THANK YOU*********");
		}
	}while(ch1==1);
	}
}	
public class graphCreated {
	public static void main(String[] args) {
		System.out.println("\n*********WELCOME*********");
		creation cr=new creation();
		cr.allCreate();
		//cr.displayList();
		//cr.matrix();
	}
}
